import os
import requests
import sqlite3
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from dotenv import load_dotenv
import asyncio

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    with sqlite3.connect('users.db') as conn:
        conn.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                last_name TEXT,
                registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è "–°—É—Ö–∞—Ä–∏–∫–∏"
def suhariki(text):
    return f"–°—É—Ö–∞—Ä–∏–∫–∏ {text} –°—É—Ö–∞—Ä–∏–∫–∏"

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    with sqlite3.connect('users.db') as conn:
        conn.execute('INSERT OR IGNORE INTO users (id, username, first_name, last_name) VALUES (?, ?, ?, ?)',
                   (user.id, user.username, user.first_name, user.last_name))
    
    await update.message.reply_text(suhariki(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –±–æ—Ç –ø–æ–≥–æ–¥—ã –∏ –Ω–æ–≤–æ—Å—Ç–µ–π.\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/weather <–≥–æ—Ä–æ–¥> - –£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É\n"
        "/news <–∫–∞—Ç–µ–≥–æ—Ä–∏—è> - –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏\n"
        "/help - –ü–æ–º–æ—â—å"
    ))

# –ö–æ–º–∞–Ω–¥–∞ /weather
async def weather(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text(suhariki("–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥: /weather –ú–æ—Å–∫–≤–∞"))
        return

    city = " ".join(context.args)
    try:
        response = requests.get(
            "https://api.openweathermap.org/data/2.5/weather",
            params={
                'q': city,
                'appid': os.getenv('WEATHER_API_KEY'),
                'units': 'metric',
                'lang': 'ru'
            }
        )
        data = response.json()

        if response.status_code == 200:
            weather_info = suhariki(
                f"üå§ –ü–æ–≥–æ–¥–∞ –≤ {city}:\n"
                f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {data['main']['temp']}¬∞C\n"
                f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {data['main']['humidity']}%\n"
                f"üå¨ –í–µ—Ç–µ—Ä: {data['wind']['speed']} –º/—Å\n"
                f"üìù {data['weather'][0]['description'].capitalize()}"
            )
            await update.message.reply_text(weather_info)
        else:
            await update.message.reply_text(suhariki(f"–û—à–∏–±–∫–∞: {data.get('message', '–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω')}"))
    except Exception as e:
        await update.message.reply_text(suhariki(f"–û—à–∏–±–∫–∞: {str(e)}"))


#/News 
async def news(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
        topics = {
            'tech': {
                'name': '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏',
                'articles': [
                    {"title": "–ò–ò –Ω–∞—É—á–∏–ª—Å—è –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–≥–æ–¥—É", "url": "https://example.com/ai-weather"},
                    {"title": "–ù–æ–≤—ã–π —Å–º–∞—Ä—Ç—Ñ–æ–Ω –≤—ã–π–¥–µ—Ç –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ", "url": "https://example.com/new-phone"}
                ]
            },
            'business': {
                'name': '–±–∏–∑–Ω–µ—Å',
                'articles': [
                    {"title": "–ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ –æ–±–Ω–æ–≤–∏–ª –º–∞–∫—Å–∏–º—É–º", "url": "https://example.com/usd-rate"},
                    {"title": "–ù–∞–ª–æ–≥–∏ –¥–ª—è IT-–∫–æ–º–ø–∞–Ω–∏–π –∏–∑–º–µ–Ω—è—Ç—Å—è", "url": "https://example.com/tax-changes"}
                ]
            }
        }
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–µ–º—É
        topic = context.args[0].lower() if context.args else 'tech'
        
        if topic not in topics:
            await update.message.reply_text(suhariki(
                f"–¢–µ–º–∞ '{topic}' –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã: " + ", ".join([f"/news {t}" for t in topics.keys()])
            ))
            return

        # 1. –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ (–µ—Å–ª–∏ API –¥–æ—Å—Ç—É–ø–µ–Ω)
        try:
            response = requests.get(
                "https://newsapi.org/v2/top-headlines",
                params={
                    'apiKey': os.getenv('NEWS_API_KEY'),
                    'category': topic if topic != 'tech' else 'technology',
                    'language': 'en',
                    'pageSize': 3
                },
                timeout=5
            )
            api_articles = response.json().get('articles', [])
        except:
            api_articles = []

        # 2. –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –Ω–æ–≤–æ—Å—Ç—è–º–∏
        all_articles = api_articles + topics[topic]['articles']
        
        if not all_articles:
            await update.message.reply_text(suhariki(
                f"–ù–æ–≤–æ—Å—Ç–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{topics[topic]['name']}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
            ))
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        await update.message.reply_text(suhariki(
            f"üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ ({topics[topic]['name']}):"
        ))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –Ω–æ–≤–æ—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        for article in all_articles[:3]:  # –ù–µ –±–æ–ª–µ–µ 3 –Ω–æ–≤–æ—Å—Ç–µ–π
            try:
                await update.message.reply_text(suhariki(
                    f"üìå {article['title']}\n"
                    f"üîó {article['url']}"
                ))
                await asyncio.sleep(0.5)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏: {e}")
                continue

    except Exception as e:
        await update.message.reply_text(suhariki(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
        ))
        

# –ö–æ–º–∞–Ω–¥–∞ /help
async def help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(suhariki(
        "üìå –ü–æ–º–æ—â—å:\n"
        "/weather <–≥–æ—Ä–æ–¥> - –ü–æ–≥–æ–¥–∞\n"
        "/news <–∫–∞—Ç–µ–≥–æ—Ä–∏—è> - –ù–æ–≤–æ—Å—Ç–∏ (general, business, technology)\n"
        "/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"
    ))

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    init_db()
    app = Application.builder().token(os.getenv('TELEGRAM_TOKEN')).build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("weather", weather))
    app.add_handler(CommandHandler("news", news))
    app.add_handler(CommandHandler("help", help))
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω üöÄ")
    app.run_polling()

if __name__ == '__main__':
    main()